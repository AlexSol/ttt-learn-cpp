// üß© Tic-Tac-Toe ‚Äî Stage 06: STL Usage
// –ü–æ–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ std::vector + –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è STL-–∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
// –ß—É–¥–æ–≤–æ! –ù–∏–∂—á–µ ‚Äî –≥–æ—Ç–æ–≤—ñ main.cpp —Ç–∞ README.md –¥–ª—è –µ—Ç–∞–ø—É 06-stl-usage, –¥–µ:

// ‚úÖ –ø–æ–ª–µ char[3][3] –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ std::vector<std::vector<char>>
// ‚úÖ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è STL-–∞–ª–≥–æ—Ä–∏—Ç–º–∏ (std::all_of, std::count)
// ‚úÖ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —â–µ –≥–Ω—É—á–∫—ñ—à–æ–≥–æ –π –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∫–æ–¥—É


#include <iostream>
#include <vector>
#include <memory>
#include <algorithm> // std::all_of, std::count
using namespace std;




const int SIZE = 3;

class Game
{
public:
    Game() : board(SIZE, vector<char>(SIZE, ' ')), currentPlayer('X') {}

    void Play()
    {
        while (true)
        {
            PrintBoard();

            int row, col;
            AskMove(row, col);
            MakeMove(row, col);

            if (IsWin())
            {
                PrintBoard();
                cout << "üéâ –ì—Ä–∞–≤–µ—Ü—å " << currentPlayer << " –ø–µ—Ä–µ–º—ñ–≥!\n";
                break;
            }

            if (IsDraw())
            {
                PrintBoard();
                cout << "ü§ù –ù—ñ—á–∏—è!\n";
                break;
            }

            SwitchPlayer();
        }
    }

private:
    vector<vector<char>> board;
    char currentPlayer;

    void PrintBoard() const
    {
        cout << "\n";
        for (int row = 0; row < SIZE; ++row)
        {
            for (int col = 0; col < SIZE; ++col)
            {
                cout << " " << board[row][col];
                if (col < SIZE - 1) cout << " |";
            }
            cout << "\n";
            if (row < SIZE - 1) cout << "---+---+---\n";
        }
        cout << "\n";
    }

    void AskMove(int& row, int& col) const
    {
        while (true)
        {
            cout << "–ì—Ä–∞–≤–µ—Ü—å " << currentPlayer << ", –≤–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—Ä—è–¥–æ–∫ —ñ —Å—Ç–æ–≤–ø–µ—Ü—å): ";
            cin >> row >> col;

            if (row < 0 || row >= SIZE || col < 0 || col >= SIZE)
            {
                cout << "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n";
                continue;
            }

            if (board[row][col] != ' ')
            {
                cout << "–ö–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n";
                continue;
            }

            break;
        }
    }

    void MakeMove(int row, int col)
    {
        board[row][col] = currentPlayer;
    }

    bool IsWin() const
    {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—è–¥–∫—ñ–≤ —Ç–∞ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —á–µ—Ä–µ–∑ all_of
        for (int i = 0; i < SIZE; ++i)
        {
            if (all_of(board[i].begin(), board[i].end(), [this](char c) { return c == currentPlayer; }))
                return true;

            if (all_of(board.begin(), board.end(), [i, this](const vector<char>& row) { return row[i] == currentPlayer; }))
                return true;
        }

        // –î—ñ–∞–≥–æ–Ω–∞–ª—ñ
        if (all_of(board.begin(), board.end(), [n = 0, this](const vector<char>& row) mutable { return row[n++] == currentPlayer; }))
            return true;

        if (all_of(board.begin(), board.end(), [n = SIZE - 1, this](const vector<char>& row) mutable { return row[n--] == currentPlayer; }))
            return true;

        return false;
    }

    bool IsDraw() const
    {
        int totalFilled = 0;
        for (const auto& row : board)
            totalFilled += count(row.begin(), row.end(), 'X') + count(row.begin(), row.end(), 'O');

        return totalFilled == SIZE * SIZE;
    }

    void SwitchPlayer()
    {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }
};

// === –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ===
int main()
{
    cout << "=== –•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏ ‚Äî –ï—Ç–∞–ø 06: STL Usage ===\n";
    auto game = make_unique<Game>();
    game->Play();
    cout << "=== –ö—ñ–Ω–µ—Ü—å –≥—Ä–∏ ===\n";
    return 0;
}
