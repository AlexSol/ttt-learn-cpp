// ‚úÖ –†–æ–∑–±–∏–≤–∞—î–º–æ –ª–æ–≥—ñ–∫—É –≥—Ä–∏ –Ω–∞ –æ–∫—Ä–µ–º—ñ –º–∞–ª–µ–Ω—å–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// ‚úÖ –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –∫–æ–∂–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
// ‚úÖ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—é—î–º–æ “ë—Ä—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ struct —ñ class –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –µ—Ç–∞–ø


// üß© Tic-Tac-Toe ‚Äî Stage 02: Refactor into Functions
// –†–æ–∑–±–∏—Ç—Ç—è –∫–æ–¥—É –Ω–∞ –º–µ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä —ñ –∫–ª–∞—Å—ñ–≤.

// ---------------
// ‚úÖ –©–æ –Ω–æ–≤–æ–≥–æ –≤ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ
// –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥	–©–æ –∑–º—ñ–Ω–µ–Ω–æ
// main()	–¢–µ–ø–µ—Ä –ª–∏—à–µ –∫–æ–æ—Ä–¥–∏–Ω—É—î –≥—Ä—É ‚Äî —á–∏—Å—Ç–∏–π —ñ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π
// AskMove()	–í—Å—è –ª–æ–≥—ñ–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –≤ –æ–∫—Ä–µ–º—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó
// MakeMove()	–í–∏–Ω–æ—Å–∏—Ç—å –∑–º—ñ–Ω—É –º–∞—Å–∏–≤—É ‚Äî –ª–æ–≥—ñ—á–Ω–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
// IsWin(), IsDraw()	–í—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ç—ñ–ª—å–∫–∏ –∑–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —É–º–æ–≤ –≥—Ä–∏

#include <iostream>
using namespace std;

const int SIZE = 3;
char board[SIZE][SIZE];

// === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===

// –ó–∞–ø–æ–≤–Ω—é—î —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ –ø—Ä–æ–±—ñ–ª–∞–º–∏
void InitBoard()
{
    for (int row = 0; row < SIZE; ++row)
        for (int col = 0; col < SIZE; ++col)
            board[row][col] = ' ';
}

// –í–∏–≤–æ–¥–∏—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
void PrintBoard()
{
    cout << "\n";
    for (int row = 0; row < SIZE; ++row)
    {
        for (int col = 0; col < SIZE; ++col)
        {
            cout << " " << board[row][col];
            if (col < SIZE - 1) cout << " |";
        }
        cout << "\n";
        if (row < SIZE - 1) cout << "---+---+---\n";
    }
    cout << "\n";
}

// === –ü–ï–†–ï–í–Ü–†–ö–ò ===

// –ß–∏ –≤–∏–≥—Ä–∞–≤ –≥—Ä–∞–≤–µ—Ü—å –∑ —Å–∏–º–≤–æ–ª–æ–º 'X' –∞–±–æ 'O'
bool IsWin(char player)
{
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—è–¥–∫—ñ–≤
    for (int row = 0; row < SIZE; ++row)
        if (board[row][0] == player && board[row][1] == player && board[row][2] == player)
            return true;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–æ–≤–ø—Ü—ñ–≤
    for (int col = 0; col < SIZE; ++col)
        if (board[0][col] == player && board[1][col] == player && board[2][col] == player)
            return true;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–∞–≥–æ–Ω–∞–ª–µ–π
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
        return true;

    if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
        return true;

    return false;
}

// –ß–∏ –ø–æ–ª–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–ø–æ–≤–Ω–µ–Ω–µ (–Ω—ñ—á–∏—è)
bool IsDraw()
{
    for (int row = 0; row < SIZE; ++row)
        for (int col = 0; col < SIZE; ++col)
            if (board[row][col] == ' ')
                return false;

    return true;
}

// === –•–Ü–î –ì–†–ê–í–¶–Ø ===

// –ü–∏—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∫—É–¥–∏ —Ö–æ—á–µ –∑—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥
void AskMove(int& row, int& col, char currentPlayer)
{
    while (true)
    {
        cout << "–ì—Ä–∞–≤–µ—Ü—å " << currentPlayer << ", –≤–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—Ä—è–¥–æ–∫ —ñ —Å—Ç–æ–≤–ø–µ—Ü—å –≤—ñ–¥ 0 –¥–æ 2): ";
        cin >> row >> col;

        if (row < 0 || row >= SIZE || col < 0 || col >= SIZE)
        {
            cout << "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n";
            continue;
        }

        if (board[row][col] != ' ')
        {
            cout << "–ö–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.\n";
            continue;
        }

        break; // –≤–∞–ª—ñ–¥–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è
    }
}

// –†–æ–±–∏—Ç—å —Ö—ñ–¥, –∑–º—ñ–Ω—é—é—á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–∞—Å–∏–≤—ñ
void MakeMove(int row, int col, char currentPlayer)
{
    board[row][col] = currentPlayer;
}

// === –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ ===

int main()
{
    cout << "=== –•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏ ‚Äî –ï—Ç–∞–ø 02: –§—É–Ω–∫—Ü—ñ—ó ===\n";

    InitBoard();
    char currentPlayer = 'X';

    while (true)
    {
        PrintBoard();

        int row, col;
        AskMove(row, col, currentPlayer);
        MakeMove(row, col, currentPlayer);

        if (IsWin(currentPlayer))
        {
            PrintBoard();
            cout << "üéâ –ì—Ä–∞–≤–µ—Ü—å " << currentPlayer << " –ø–µ—Ä–µ–º—ñ–≥!\n";
            break;
        }

        if (IsDraw())
        {
            PrintBoard();
            cout << "ü§ù –ù—ñ—á–∏—è!\n";
            break;
        }

        // –ó–º—ñ–Ω–∞ –≥—Ä–∞–≤—Ü—è
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    cout << "=== –ö—ñ–Ω–µ—Ü—å –≥—Ä–∏ ===\n";
    return 0;
}
