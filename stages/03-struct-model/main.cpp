// üß© Tic-Tac-Toe ‚Äî Stage 03: Struct-Based Game
// –ù–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ –≤—Å—è –ª–æ–≥—ñ–∫–∞ –≥—Ä–∏ –æ–±–≥–æ—Ä–Ω—É—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Game

#include <iostream>
using namespace std;

const int SIZE = 3;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä–∏: –≤–∫–ª—é—á–∞—î –ø–æ–ª–µ —Ç–∞ –æ—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç–æ–¥–∏
struct Game
{
    char board[SIZE][SIZE];
    char currentPlayer = 'X';

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–ª—è
    void Init()
    {
        for (int row = 0; row < SIZE; ++row)
            for (int col = 0; col < SIZE; ++col)
                board[row][col] = ' ';
    }

    // –í–∏–≤—ñ–¥ –ø–æ–ª—è
    void PrintBoard() const
    {
        cout << "\n";
        for (int row = 0; row < SIZE; ++row)
        {
            for (int col = 0; col < SIZE; ++col)
            {
                cout << " " << board[row][col];
                if (col < SIZE - 1) cout << " |";
            }
            cout << "\n";
            if (row < SIZE - 1) cout << "---+---+---\n";
        }
        cout << "\n";
    }

    // –ó–∞–ø–∏—Ç —Ö–æ–¥—É –≥—Ä–∞–≤—Ü—è
    void AskMove(int& row, int& col) const
    {
        while (true)
        {
            cout << "–ì—Ä–∞–≤–µ—Ü—å " << currentPlayer << ", –≤–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—Ä—è–¥–æ–∫ —ñ —Å—Ç–æ–≤–ø–µ—Ü—å): ";
            cin >> row >> col;

            if (row < 0 || row >= SIZE || col < 0 || col >= SIZE)
            {
                cout << "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n";
                continue;
            }

            if (board[row][col] != ' ')
            {
                cout << "–ö–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n";
                continue;
            }

            break;
        }
    }

    // –í–∏–∫–æ–Ω–∞—Ç–∏ —Ö—ñ–¥
    void MakeMove(int row, int col)
    {
        board[row][col] = currentPlayer;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º–æ–≥–∏
    bool IsWin() const
    {
        // –†—è–¥–∫–∏
        for (int row = 0; row < SIZE; ++row)
            if (board[row][0] == currentPlayer && board[row][1] == currentPlayer && board[row][2] == currentPlayer)
                return true;

        // –°—Ç–æ–≤–ø—Ü—ñ
        for (int col = 0; col < SIZE; ++col)
            if (board[0][col] == currentPlayer && board[1][col] == currentPlayer && board[2][col] == currentPlayer)
                return true;

        // –î—ñ–∞–≥–æ–Ω–∞–ª—ñ
        if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer)
            return true;

        if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer)
            return true;

        return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω—ñ—á–∏—î—ó
    bool IsDraw() const
    {
        for (int row = 0; row < SIZE; ++row)
            for (int col = 0; col < SIZE; ++col)
                if (board[row][col] == ' ')
                    return false;

        return true;
    }

    // –ó–º—ñ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    void SwitchPlayer()
    {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }
};

// === –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ===
int main()
{
    cout << "=== –•—Ä–µ—Å—Ç–∏–∫–∏-–ù—É–ª–∏–∫–∏ ‚Äî –ï—Ç–∞–ø 03: struct Game ===\n";

    Game game;
    game.Init();

    while (true)
    {
        game.PrintBoard();

        int row, col;
        game.AskMove(row, col);
        game.MakeMove(row, col);

        if (game.IsWin())
        {
            game.PrintBoard();
            cout << "üéâ –ì—Ä–∞–≤–µ—Ü—å " << game.currentPlayer << " –ø–µ—Ä–µ–º—ñ–≥!\n";
            break;
        }

        if (game.IsDraw())
        {
            game.PrintBoard();
            cout << "ü§ù –ù—ñ—á–∏—è!\n";
            break;
        }

        game.SwitchPlayer();
    }

    cout << "=== –ö—ñ–Ω–µ—Ü—å –≥—Ä–∏ ===\n";
    return 0;
}
